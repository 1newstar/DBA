mysql>select id,State,command,info from information_schema.processlist where command = 'query';

# SQLserver
SQL语句的效率如何：

declare @d datetime
set @d=getdate()
/*你的SQL脚本开始*/
SELECT [TestCase] FROM [TestCaseSelect] 
/*你的SQL脚本结束*/
select [语句执行花费时间(毫秒)]=datediff(ms,@d,getdate())

# 分区表指定数据目录
select @@have_symlink,@@innodb_file_per_table;
/etc/my.cnf
symbolic-links=1

CREATE TABLE `data_slice_mnt` (
`id` INT (11) UNSIGNED NOT NULL AUTO_INCREMENT,
`line_id` INT (11) UNSIGNED NOT NULL,
PRIMARY KEY (`id`)) 
ENGINE = MyISAM AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 
PARTITION BY RANGE (`id`)(
PARTITION part01 VALUES LESS THAN MAXVALUE DATA DIRECTORY = "/mnt/data" INDEX DIRECTORY = "/mnt/data");


CREATE TABLE `data_slice_mnt` (
`id` INT (11) UNSIGNED NOT NULL AUTO_INCREMENT,
`line_id` INT (11) UNSIGNED NOT NULL,
PRIMARY KEY (`id`)) 
ENGINE = innodb AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 
PARTITION BY RANGE (`id`)(
PARTITION part01 VALUES LESS THAN MAXVALUE DATA DIRECTORY = "/mnt/data" );

# 查看表大小

select concat(round(data_length/1024/1024,2),'MB') as data_length_MB,concat(round(index_length/1024/1024,2),'MB') as index_length_MB
from information_schema.tables 
where
table_schema='ecshoptest'  and 
table_name regexp '^app';

# 统计库中表的大小按照从大到小排序，去除top10

select table_schema,table_name, TABLE_ROWS,round(data_length/1024/1024,2) as data_length_MB,round(index_length/1024/1024,2) 
as index_length_MB from information_schema.tables order by data_length_MB desc,index_length_MB desc limit 10;



# 统计表总大小

select concat(round(sum(data_length/1024/1024),2),'MB') as data_length_MB,concat(round(sum(index_length/1024/1024),2),'MB') as index_length_MB
from information_schema.tables 
where
table_schema='ecshoptest'  and 
table_name regexp '^app';

# 统计库大小

select table_schema,round(sum(data_length/1024/1024),2) as data_length_MB,round(sum(index_length/1024/1024),2) 
as index_length_MB from information_schema.tables  group by table_schema order by data_length_MB desc,index_length_MB desc;



# 查看客户端会话连接
mysql -uroot -p'xxx' -e "select host from information_schema.processlist" | awk -F ':' '{print $1}' | sort | uniq


# 内存查看
show variables where variable_name in (
'innodb_buffer_pool_size','innodb_log_buffer_size','innodb_additional_mem_pool_size','key_buffer_size','query_cache_size');

# session私有内存
mysql>show variables where variable_name in (
'read_buffer_size','read_rnd_buffer_size','sort_buffer_size','join_buffer_size','binlog_cache_size','tmp_table_size');


# RDS逻辑备份恢复预处理

#!/bin/bash
sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/ ' $1 > tmp.sql
awk '{ if (index($0,"GTID_PURGED")) { getline; while (length($0) > 0) { getline; } } else { print $0 } }' tmp.sql | grep -iv 'set @@' > retmp.sql
egrep -in "definer|set @@" your_revised.sql


# 查看metadatalock

## 第一种情况，则定位到长时间未提交的事务kill即可

# 查询 information_schema.innodb_trx 看到有长时间未完成的事务， 使用 kill 命令终止该查询。

select concat('kill ',i.trx_mysql_thread_id,';') from information_schema.innodb_trx i,
  (select 
         id, time
     from
         information_schema.processlist
     where
         time = (select 
                 max(time)
             from
                 information_schema.processlist
             where
                 state = 'Waiting for table metadata lock'
                     and substring(info, 1, 5) in ('alter' , 'optim', 'repai', 'lock ', 'drop ', 'creat'))) p
  where timestampdiff(second, i.trx_started, now()) > p.time
  and i.trx_mysql_thread_id  not in (connection_id(),p.id);

-- 请根据具体的情景修改查询语句
-- 如果导致阻塞的语句的用户与当前用户不同，请使用导致阻塞的语句的用户登录来终止会话

## 第二种情况，是在第一种情况的基础上，还是有metadatalock锁，则手动继续kill掉长事务即可，注意生产环境中，有可能ddl操作需要保留

select id,State,command from information_schema.processlist where State="Waiting for table metadata lock";
select  timediff(sysdate(),trx_started) timediff,sysdate(),trx_started,id,USER,DB,COMMAND,STATE,trx_state,trx_query from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id;
show processlist;
select  concat('kill ',trx_mysql_thread_id,';') from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id and State!="Waiting for table metadata lock";


## 第三种情况没有发现长时间未提交的事务，但是会话中有metadatalock


select id,State,command from information_schema.processlist where State="Waiting for table metadata lock";
select  timediff(sysdate(),trx_started) timediff,sysdate(),trx_started,id,USER,DB,COMMAND,STATE,trx_state,trx_query from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id;
select t.processlist_id,t.processlist_time,e.sql_text from performance_schema.threads t,performance_schema.events_statements_current e where t.thread_id=e.thread_id and e.SQL_TEXT like '%gai%';

--------------------------------------------------------------------------
# 用于分析查看metadatalock 锁的第三中情况的细节问题

select * from performance_schema.mutex_instances where LOCKED_BY_THREAD_ID is not null\G;


# 查看有metalock锁的线程
# 查看未提交的事务运行时间，线程id，用户等信息
# 查看未提交的事务运行时间，线程id，用户，sql语句等信息
# 查看错误语句
# 根据错误语句的THREAD_ID，查看PROCESSLIST_ID

select id,State,command from information_schema.processlist where State="Waiting for table metadata lock";
select  timediff(sysdate(),trx_started) timediff,sysdate(),trx_started,id,USER,DB,COMMAND,STATE,trx_state,trx_query from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id;
select  timediff(sysdate(),trx_started) timediff,sysdate(),trx_started,id,USER,DB,COMMAND,STATE,trx_state from information_schema.processlist,information_schema.innodb_trx where trx_mysql_thread_id=id\G;
select * from performance_schema.events_statements_current where SQL_TEXT like '%booboo%'\G;
select * from performance_schema.threads where thread_id=46052\G;
select * from information_schema.processlist where id=xxx\G;
---------------------------------------------------------------------



# 创建 MySQL事件，自动清理长时间执行的查询。
## 比如下面的代码会每 5 分钟清理一次当前用户运行时间超过 1 个小时且非锁等待会话。

create event my_long_running_query_monitor
on schedule every 5 minute
starts '2015-09-15 11:00:00'
on completion preserve enable do
begin
  declare v_sql varchar(500);
  declare no_more_long_running_query integer default 0;
  declare c_tid cursor for
    select concat ('kill ',id,';') from 
    information_schema.processlist
    where time >= 3600
    and user = substring(current_user(),1,instr(current_user(),'@')-1)
    and command not in ('sleep')
    and state not like ('waiting for table%lock');
  declare continue handler for not found
    set no_more_long_running_query=1;
 
  open c_tid;
  repeat
    fetch c_tid into v_sql;
    set @v_sql=v_sql;
    prepare stmt from @v_sql;
    execute stmt;
    deallocate prepare stmt;
  until no_more_long_running_query end repeat;
  close c_tid;
end;

# 查看进程
select * from information_schema.processlist;

# 自建mysql查看会话对应的线程
select thread_id,id,user,host,db,command,time,state,info from information_schema.processlist list,performance_schema.threads t where  list.id=t.processlist_id;


# 查看innodb锁冲突
select * from information_schema.innodb_lock_waits;
select * from information_schema.innodb_locks;




# 查看innodb事务锁冲突情况
select blocking_trx_id, count(blocking_trx_id) as countnum from (select a.trx_id,a.trx_state,b.requesting_trx_id,b.blocking_trx_id from information_schema.innodb_lock_waits as  b left join information_schema.innodb_trx as a on a.trx_id=b.requesting_trx_id) as t1 group by blocking_trx_id order by  countnum  desc;

# 获取到innodb事务锁冲突的原始id
select id from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id and trx_id in (select blocking_trx_id from (select blocking_trx_id, count(blocking_trx_id) as countnum from (select a.trx_id,a.trx_state,b.requesting_trx_id,b.blocking_trx_id from information_schema.innodb_lock_waits as  b left join information_schema.innodb_trx as a on a.trx_id=b.requesting_trx_id) as t1 group by blocking_trx_id order by  countnum desc limit 1) c) ;


# 查看当前二进制日志
show master status;

# 查看所有的binlog文件名和文件大小
show binary logs;
show master logs;

# 查看binlog日志中具体的事件
show binlog events in 'mastera.000005' from 219 limit 3;

# 查看支持的字符编码和校验集信息
show character set;
show character set like 'utf%';
show collation;
show collation like 'utf8%'

# 查看当前使用的编码信息


# 查看表中所有列的信息
show full columns from user from mysql;
show full columns from user from mysql like 'user';
show full columns from user from mysql where field='user';

# 查看对象（库、表、函数、存储过程、表、触发器、视图）信息
SHOW CREATE DATABASE db_name
SHOW CREATE EVENT event_name
SHOW CREATE FUNCTION func_name
SHOW CREATE PROCEDURE proc_name
SHOW CREATE TABLE tbl_name
SHOW CREATE TRIGGER trigger_name
SHOW CREATE VIEW view_name

# 查看库名
show databases like 'mysql'；


# 查看存储引擎的状态
show engine innodb status\G;

SHOW ENGINE engine_name {STATUS | MUTEX}
SHOW [STORAGE] ENGINES
SHOW ERRORS [LIMIT [offset,] row_count]
SHOW EVENTS
SHOW FUNCTION CODE func_name
SHOW FUNCTION STATUS [like_or_where]
SHOW GRANTS FOR user
SHOW INDEX FROM tbl_name [FROM db_name]
SHOW MASTER STATUS
SHOW OPEN TABLES [FROM db_name] [like_or_where]
SHOW PLUGINS
SHOW PROCEDURE CODE proc_name
SHOW PROCEDURE STATUS [like_or_where]
SHOW PRIVILEGES
SHOW [FULL] PROCESSLIST
SHOW PROFILE [types] [FOR QUERY n] [OFFSET n] [LIMIT n]
SHOW PROFILES
SHOW RELAYLOG EVENTS [IN 'log_name'] [FROM pos] [LIMIT [offset,] row_count]
SHOW SLAVE HOSTS
SHOW SLAVE STATUS [NONBLOCKING]
SHOW [GLOBAL | SESSION] STATUS [like_or_where]
SHOW TABLE STATUS [FROM db_name] [like_or_where]
SHOW [FULL] TABLES [FROM db_name] [like_or_where]
SHOW TRIGGERS [FROM db_name] [like_or_where]
SHOW [GLOBAL | SESSION] VARIABLES [like_or_where]
SHOW WARNINGS [LIMIT [offset,] row_count]

like_or_where:
    LIKE 'pattern'
  | WHERE expr


# 大表优化



* 第一优化sql和索引；


* 第二加缓存，memcached,redis；


* 第三以上都做了后，还是慢，就做主从复制或主主复制，读写分离，可以在应用层做，效率高，也可以用三方工具，例如360的atlas等；


* 第四如果以上都做了还是慢，使用mysql自带的分区表；


* 第五如果以上都做了，那就先做垂直拆分，根据你模块的耦合度，将一个大的系统分为多个小的系统，也就是分布式系统；

* 
第六才是水平切分，针对数据量大的表，这一步最麻烦，最能考验技术水平，要选择一个合理的sharding key,为了有好的查询效率，表结构也要改动，做一定的冗余，应用也要改，sql中尽量带sharding key，将数据定位到限定的表上去查，而不是扫描全部的表；


# killecshopallsessions.sh 

============================================
kille_requesting_trx_id.sh 
============================================
#!/bin/bash
# kill掉 ecshoptest库中事务状态为lock wait的会话id 
user=yaoli
password=
host=rdsiiavyfvbqnnbi.mysql.rds.aliyuncs.com
port=3306
mysql -u$user -p$password -h$host  -P$port -e "select  concat('KILL ',id,';') from information_schema.processlist,information_schema.innodb_trx where trx_mysql_thread_id=id and trx_state like 'LOCK%' and db='ecshoptest';" &> testfile
sed -i '1d' testfile
mysql -u$user -p$password -h$host  -P$port  < testfile

kille_blocking_trx_id.sh 
============================================
#!/bin/bash
# kill掉 ecshoptest库中的导致lock wait会话id
user=yaoli
password=
host=rdsiiavyfvbqnnbi.mysql.rds.aliyuncs.com
port=3306

mysql -u$user -p$password -h$host  -P$port -e "select concat('kill ',id,';') from information_schema.processlist,information_schema.innodb_trx  where trx_mysql_thread_id=id and trx_id in (select blocking_trx_id from (select blocking_trx_id, count(blocking_trx_id) as countnum from (select a.trx_id,a.trx_state,b.requesting_trx_id,b.blocking_trx_id from information_schema.innodb_lock_waits as  b left join information_schema.innodb_trx as a on a.trx_id=b.requesting_trx_id) as t1 group by blocking_trx_id order by  countnum desc limit 1) c) ;" > tmpfile

awk '{if (NR != 1) print $0 }' tmpfile | mysql -u$user -p$password -h$host  -P$port 



# 属于某个库的会话
select id from information_schema.processlist where db='ecshoptest'；

# 执行命令为sleep或者query
select id from information_schema.processlist where command='sleep'；

# 会话时间超过多少秒的的
select id from information_schema.processlist where time>5000;

# 找到ecshoptest库中事务状态为lock的会话id
select  id from information_schema.processlist,information_schema.innodb_trx where trx_mysql_thread_id=id and trx_state like 'LOCK%' and db='ecshoptest';

# 所有的会话id
select  id from information_schema.processlist；

# 属于某个用户的会话
select id from information_schema.processlist where user='yaoli'；


#!/bin/bash
# kill掉 所有会话
user=xxx
password=xxx
host=xxxx.mysql.rds.aliyuncs.com
port=3306

mysql -u$user -p$password -h$host  -P$port -e "select  concat('KILL ',id,';') from information_schema.processlist;" > tmpfile

awk '{if (NR != 1) print $0 }' tmpfile | mysql -u$user -p$password -h$host  -P$port